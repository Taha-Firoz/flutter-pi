name: CMake

on:
  push:
    branches: [ master, feature/gh-actions ]
  pull_request:
    branches: [ master, feature/gh-actions ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [linux, bullseye]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt-get install -y cmake libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev ttf-mscorefonts-installer fontconfig libsystemd-dev libinput-dev libudev-dev  libxkbcommon-dev ninja-build libgstreamer-plugins-base1.0-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DBUILD_OMXPLAYER_VIDEO_PLAYER_PLUGIN=On -DBUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN=On -DBUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN=On -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      if: false
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  crossbuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        img:
          - arm32v6/debian:bullseye
          - arm32v7/debian:bullseye
          - arm64v8/debian:bullseye
          - i386/debian:bullseye
          - amd64/debian:bullseye
          - riscv64/debian:bullseye
          - navikey/raspbian-bullseye
    steps:
     - uses: actions/checkout@v2
     
     - uses: docker/setup-qemu-action@v2
     
     - uses: docker://${{ matrix.img }}
       with:
         entrypoint: /bin/bash
         args: |
           -c "\
           export DEBIAN_FRONTEND=noninteractive && \
           apt-get update && \
           apt-get install -y git cmake ninja-build gcc g++ libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev fonts-liberation fontconfig libsystemd-dev libinput-dev libudev-dev libxkbcommon-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad gstreamer1.0-libav && \
           git clone https://github.com/ardera/flutter-pi && \
           git checkout ${{ github.ref }} && \
           cmake -Bflutter-pi/build -Sflutter-pi -GNinja -DCMAKE_BUILD_TYPE=Release && \
           ninja -Cflutter-pi/build && \
           ninja -Cflutter-pi/build install \
           "
